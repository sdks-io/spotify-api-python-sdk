# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapi.api_helper import APIHelper
from spotifywebapi.models.external_url_object import ExternalUrlObject
from spotifywebapi.models.followers_object import FollowersObject


class PlaylistUserObject(object):

    """Implementation of the 'PlaylistUserObject' model.

    TODO: type model description here.

    Attributes:
        external_urls (ExternalUrlObject): Known public external URLs for this
            user.
        followers (FollowersObject): Information about the followers of this
            user.
        href (str): A link to the Web API endpoint for this user.
        id (str): The [Spotify user
            ID](/documentation/web-api/concepts/spotify-uris-ids) for this
            user.
        mtype (Type4Enum): The object type.
        uri (str): The [Spotify
            URI](/documentation/web-api/concepts/spotify-uris-ids) for this
            user.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "external_urls": 'external_urls',
        "followers": 'followers',
        "href": 'href',
        "id": 'id',
        "mtype": 'type',
        "uri": 'uri'
    }

    _optionals = [
        'external_urls',
        'followers',
        'href',
        'id',
        'mtype',
        'uri',
    ]

    def __init__(self,
                 external_urls=APIHelper.SKIP,
                 followers=APIHelper.SKIP,
                 href=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 uri=APIHelper.SKIP):
        """Constructor for the PlaylistUserObject class"""

        # Initialize members of the class
        if external_urls is not APIHelper.SKIP:
            self.external_urls = external_urls 
        if followers is not APIHelper.SKIP:
            self.followers = followers 
        if href is not APIHelper.SKIP:
            self.href = href 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if uri is not APIHelper.SKIP:
            self.uri = uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        external_urls = ExternalUrlObject.from_dictionary(dictionary.get('external_urls')) if 'external_urls' in dictionary.keys() else APIHelper.SKIP
        followers = FollowersObject.from_dictionary(dictionary.get('followers')) if 'followers' in dictionary.keys() else APIHelper.SKIP
        href = dictionary.get("href") if dictionary.get("href") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        uri = dictionary.get("uri") if dictionary.get("uri") else APIHelper.SKIP
        # Return an object of this model
        return cls(external_urls,
                   followers,
                   href,
                   id,
                   mtype,
                   uri)
