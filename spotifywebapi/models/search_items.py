# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapi.api_helper import APIHelper
from spotifywebapi.models.paging_artist_object import PagingArtistObject
from spotifywebapi.models.paging_playlist_object import PagingPlaylistObject
from spotifywebapi.models.paging_simplified_album_object import PagingSimplifiedAlbumObject
from spotifywebapi.models.paging_simplified_audiobook_object import PagingSimplifiedAudiobookObject
from spotifywebapi.models.paging_simplified_episode_object import PagingSimplifiedEpisodeObject
from spotifywebapi.models.paging_simplified_show_object import PagingSimplifiedShowObject
from spotifywebapi.models.paging_track_object import PagingTrackObject


class SearchItems(object):

    """Implementation of the 'SearchItems' model.

    TODO: type model description here.

    Attributes:
        tracks (PagingTrackObject): TODO: type description here.
        artists (PagingArtistObject): TODO: type description here.
        albums (PagingSimplifiedAlbumObject): TODO: type description here.
        playlists (PagingPlaylistObject): TODO: type description here.
        shows (PagingSimplifiedShowObject): TODO: type description here.
        episodes (PagingSimplifiedEpisodeObject): TODO: type description
            here.
        audiobooks (PagingSimplifiedAudiobookObject): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tracks": 'tracks',
        "artists": 'artists',
        "albums": 'albums',
        "playlists": 'playlists',
        "shows": 'shows',
        "episodes": 'episodes',
        "audiobooks": 'audiobooks'
    }

    _optionals = [
        'tracks',
        'artists',
        'albums',
        'playlists',
        'shows',
        'episodes',
        'audiobooks',
    ]

    def __init__(self,
                 tracks=APIHelper.SKIP,
                 artists=APIHelper.SKIP,
                 albums=APIHelper.SKIP,
                 playlists=APIHelper.SKIP,
                 shows=APIHelper.SKIP,
                 episodes=APIHelper.SKIP,
                 audiobooks=APIHelper.SKIP):
        """Constructor for the SearchItems class"""

        # Initialize members of the class
        if tracks is not APIHelper.SKIP:
            self.tracks = tracks 
        if artists is not APIHelper.SKIP:
            self.artists = artists 
        if albums is not APIHelper.SKIP:
            self.albums = albums 
        if playlists is not APIHelper.SKIP:
            self.playlists = playlists 
        if shows is not APIHelper.SKIP:
            self.shows = shows 
        if episodes is not APIHelper.SKIP:
            self.episodes = episodes 
        if audiobooks is not APIHelper.SKIP:
            self.audiobooks = audiobooks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        tracks = PagingTrackObject.from_dictionary(dictionary.get('tracks')) if 'tracks' in dictionary.keys() else APIHelper.SKIP
        artists = PagingArtistObject.from_dictionary(dictionary.get('artists')) if 'artists' in dictionary.keys() else APIHelper.SKIP
        albums = PagingSimplifiedAlbumObject.from_dictionary(dictionary.get('albums')) if 'albums' in dictionary.keys() else APIHelper.SKIP
        playlists = PagingPlaylistObject.from_dictionary(dictionary.get('playlists')) if 'playlists' in dictionary.keys() else APIHelper.SKIP
        shows = PagingSimplifiedShowObject.from_dictionary(dictionary.get('shows')) if 'shows' in dictionary.keys() else APIHelper.SKIP
        episodes = PagingSimplifiedEpisodeObject.from_dictionary(dictionary.get('episodes')) if 'episodes' in dictionary.keys() else APIHelper.SKIP
        audiobooks = PagingSimplifiedAudiobookObject.from_dictionary(dictionary.get('audiobooks')) if 'audiobooks' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(tracks,
                   artists,
                   albums,
                   playlists,
                   shows,
                   episodes,
                   audiobooks)
