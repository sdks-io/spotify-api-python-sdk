# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapi.api_helper import APIHelper
from spotifywebapi.models.context_object import ContextObject
from spotifywebapi.models.disallows_object import DisallowsObject


class CurrentlyPlayingObject(object):

    """Implementation of the 'CurrentlyPlayingObject' model.

    TODO: type model description here.

    Attributes:
        context (ContextObject): A Context Object. Can be `null`.
        timestamp (long|int): Unix Millisecond Timestamp when data was
            fetched
        progress_ms (int): Progress into the currently playing track or
            episode. Can be `null`.
        is_playing (bool): If something is currently playing, return `true`.
        item (object): The currently playing track or episode. Can be `null`.
        currently_playing_type (str): The object type of the currently playing
            item. Can be one of `track`, `episode`, `ad` or `unknown`.
        actions (DisallowsObject): Allows to update the user interface based
            on which playback actions are available within the current
            context.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "context": 'context',
        "timestamp": 'timestamp',
        "progress_ms": 'progress_ms',
        "is_playing": 'is_playing',
        "item": 'item',
        "currently_playing_type": 'currently_playing_type',
        "actions": 'actions'
    }

    _optionals = [
        'context',
        'timestamp',
        'progress_ms',
        'is_playing',
        'item',
        'currently_playing_type',
        'actions',
    ]

    def __init__(self,
                 context=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 progress_ms=APIHelper.SKIP,
                 is_playing=APIHelper.SKIP,
                 item=APIHelper.SKIP,
                 currently_playing_type=APIHelper.SKIP,
                 actions=APIHelper.SKIP):
        """Constructor for the CurrentlyPlayingObject class"""

        # Initialize members of the class
        if context is not APIHelper.SKIP:
            self.context = context 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 
        if progress_ms is not APIHelper.SKIP:
            self.progress_ms = progress_ms 
        if is_playing is not APIHelper.SKIP:
            self.is_playing = is_playing 
        if item is not APIHelper.SKIP:
            self.item = item 
        if currently_playing_type is not APIHelper.SKIP:
            self.currently_playing_type = currently_playing_type 
        if actions is not APIHelper.SKIP:
            self.actions = actions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        context = ContextObject.from_dictionary(dictionary.get('context')) if 'context' in dictionary.keys() else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        progress_ms = dictionary.get("progress_ms") if dictionary.get("progress_ms") else APIHelper.SKIP
        is_playing = dictionary.get("is_playing") if "is_playing" in dictionary.keys() else APIHelper.SKIP
        item = dictionary.get("item") if dictionary.get("item") else APIHelper.SKIP
        currently_playing_type = dictionary.get("currently_playing_type") if dictionary.get("currently_playing_type") else APIHelper.SKIP
        actions = DisallowsObject.from_dictionary(dictionary.get('actions')) if 'actions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(context,
                   timestamp,
                   progress_ms,
                   is_playing,
                   item,
                   currently_playing_type,
                   actions)
